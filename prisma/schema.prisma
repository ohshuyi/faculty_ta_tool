datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
generator dbml {
  provider = "prisma-dbml-generator"
}
generator erd {
  provider = "prisma-erd-generator"
}

model Task {
  id             Int      @id @default(autoincrement())
  name           String   @default("Untitled Task") // Provide a default value
  dueDate        DateTime
  details        String
  status         String   @default("pending") // Set default status to "pending"
  
  professor      User     @relation("ProfessorTasks", fields: [professorId], references: [id], onDelete: Cascade)
  professorId    Int
  ta             User     @relation("TATasks", fields: [taId], references: [id], onDelete: Cascade)
  taId           Int
  
  classes     Class[]   @relation("TaskClasses") // Many-to-many relationship
  createdAt      DateTime @default(now()) // Automatically set the creation date
  files          File[]   // Relation to uploaded files
  comments       Comment[] // Relation to comments
}

model Ticket {
  id               Int      @id @default(autoincrement())
  ticketDescription String
  category         String
  priority         String
  status           String   @default("open")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  classes            Class[]   @relation("TicketClasses")

  taId             Int
  ta               User     @relation("TATickets", fields: [taId], references: [id], onDelete: Cascade)

  professorId      Int
  professor        User     @relation("ProfessorTickets", fields: [professorId], references: [id], onDelete: Cascade)

  studentId        Int?     // Foreign key for the associated Student
  student          Student? @relation("StudentTickets", fields: [studentId], references: [id], onDelete: Cascade)

  comments         Comment[]
  files            File[]
}
model File {
  id        Int      @id @default(autoincrement())
  url       String
  fileName  String
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId  Int?     // Optional foreign key for ticket
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int?     // Optional foreign key for task
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      Role     @default(USER) // Role can be 'TA', 'PROFESSOR', 'STUDENT', etc.
  createdAt DateTime @default(now())

  // Existing relations
  assignedTATickets       Ticket[] @relation("TATickets")
  assignedProfessorTickets Ticket[] @relation("ProfessorTickets")

  // New relations for tasks
  assignedTATasks         Task[]   @relation("TATasks")        // Tasks where the user is a TA
  assignedProfessorTasks  Task[]   @relation("ProfessorTasks") // Tasks where the user is a Professor
}


model Comment {
  id        Int      @id @default(autoincrement())
  author    String
  content   String
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId  Int?     // Optional foreign key for ticket
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int?     // Optional foreign key for task
  createdAt DateTime @default(now())
}

enum Role {
  USER
  TA
  PROFESSOR
  ADMIN
}

model Class {
  id          Int       @id @default(autoincrement())
  courseCode  String
  classType   String    @default("Unknown") // Default value for migration
  classGroup  String    @default("Unknown") // Default value for migration
  students    Student[] @relation("ClassStudents")
  tickets     Ticket[]  @relation("TicketClasses")
  tasks       Task[]    @relation("TaskClasses")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Student {
  id          Int       @id @default(autoincrement())
  name        String    // Student's name
  studentCode String    @unique // Unique student identifier
  prog        String
  classes     Class[]   @relation("ClassStudents") // Many-to-many relationship
  createdAt   DateTime  @default(now())
  tickets     Ticket[]  @relation("StudentTickets") // Relation back to Ticket
}